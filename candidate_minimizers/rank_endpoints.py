from typing import List, Tuple

from confidence_intervals.confidence_interval import BaseConfidenceIntervalCalculator


class ExampleConfidenceIntervalCalculator(BaseConfidenceIntervalCalculator):
    def __init__(self, alpha: float = 0.05):
        """
        Initializes the confidence interval calculator with a significance level alpha.
        """
        super().__init__(alpha)
        self.__name__ = "Example"  # Assigning a name to the derived class

    def calculate(self, p_hat: float, n: int) -> Tuple[float, float]:
        """
        Calculates the confidence interval for a proportion p_hat with sample size n.

        Parameters:
            p_hat (float): Sample proportion.
            n (int): Sample size.

        Returns:
            Tuple[float, float]: Lower and upper bounds of the confidence interval.
        """
        lower_bound = max(0., p_hat - 0.1 / n)
        upper_bound = min(1., p_hat + 0.1 / n)
        return lower_bound, upper_bound


def rank_endpoints(
        n: int,
        confidence_interval_function: BaseConfidenceIntervalCalculator,
        precision: int = 10
) -> List[float]:
    """Ranks the endpoints of the confidence intervals generated by the provided function."""
    endpoints: set[float] = set()

    # For each Xi = 0, ..., N, compute the confidence interval and collect endpoints
    for i in range(n + 1):
        interval = confidence_interval_function.calculate(i / n, n)
        # Round to specified precision to handle very close values
        endpoints.add(round(interval[0], precision))
        endpoints.add(round(interval[1], precision))

    # Filter endpoints to keep those between 0 and 1
    filtered_endpoints: set[float] = {ep for ep in endpoints if 0 < ep < 1}

    # Rank the filtered endpoints
    ranked_endpoints: List[float] = sorted(filtered_endpoints)

    return ranked_endpoints


if __name__ == "__main__":
    # Example usage
    N = 10
    confidence_interval_calculator = ExampleConfidenceIntervalCalculator()  # Create an instance
    ranked_endpoints_ = rank_endpoints(N, confidence_interval_calculator)
    print("Ranked endpoints between 0 and 1:", ranked_endpoints_)
