from typing import Callable, List, Tuple


def example_confidence_interval(p: float, n: int) -> Tuple[float, float]:
    """A placeholder for the actual confidence interval function.
    Replace this with the actual function to compute the confidence interval for p and n.
    """
    # Example: using a simple symmetric interval around p
    lower_bound = max(0., p - 0.1)
    upper_bound = min(1., p + 0.1)
    return lower_bound, upper_bound


def rank_endpoints(n: int, confidence_interval_function: Callable[[float, int], Tuple[float, float]],
                   precision: int = 10) -> List[float]:
    """Ranks the endpoints of the confidence intervals generated by the provided function."""
    endpoints: set[float] = set()

    # For each Xi = 0, ..., N, compute the confidence interval and collect endpoints
    for i in range(n + 1):
        interval = confidence_interval_function(i / n, n)
        # Round to specified precision to handle very close values
        endpoints.add(round(interval[0], precision))
        endpoints.add(round(interval[1], precision))

    # Filter endpoints to keep those between 0 and 1
    filtered_endpoints: set[float] = {ep for ep in endpoints if 0 < ep < 1}

    # Rank the filtered endpoints
    ranked_endpoints: List[float] = sorted(filtered_endpoints)

    return ranked_endpoints


if __name__ == "__main__":
    # Example usage
    N = 10
    ranked_endpoints_ = rank_endpoints(N, example_confidence_interval)
    print("Ranked endpoints between 0 and 1:", ranked_endpoints_)
